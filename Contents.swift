import Foundation

// MARK: Формальное определение функций

// func - ключевое слово
// Имя функций пишется с маленькой буквы
// Для имени функции используется формат camel case

//func имя_функции (параметры) -> тип_возвращаемого_значения {
//
//    // набор инструкций
//
//}

// MARK: Простейшая функция
// Обязательно надо добавлять комментарии к написанному коду, в котором описывается функционал
// Для добавления комментрия можно использовать комбинацию клавишь Option + Command + /, предварительно нажыв на название
// Если функция выполняет одну инструкцию, то ее можно объявить в одну строку

/// ОБЪЯВЛЕНИЕ ФУНКЦИИ

/// Функция не принимает никаких параметров и не возвращает никаких значений. Выводит в консоль "Skillbox"
func printName() { print("Skillbox") }

// ВЫЗОВ ФУНКЦИИ printName()

// MARK: Функция, принимающая два параметра

/// ОБЪЯВЛЕНИЕ ФУНКЦИИ

/// Функция принимает два параметра name: String и age: Int,  и выводит в консоль "Имя: \(name) ; возраст: \(age)"
/// - Parameters:
///   - name: Строковое значение
///   - age: Числовое значение
func printInfo(name: String, age: Int) {
    
    // Для удобства чтения, желательно оставлять одну строчку выше инструкций и одну строчку ниже
    
    print("Имя: \(name) ; возраст: \(age)")
    
}

// ВЫЗОВ ФУНКЦИИ printName(name: "Vasya", age: 10)


// MARK: Функция, принимающая два параметра со значениями по умолчанию

/// ОБЪЯВЛЕНИЕ ФУНКЦИИ

/// Функция принимает два параметра name: String и age: Int,  и выводит в консоль "Имя: \(name) ; возраст: \(age)"
///
/// - Parameters:
///   - name: Строковое значени, по умолчанию инициализировано значением "Tom"
///   - age: Числовое значени, по умолчанию инициализировано значением 22
func printDefaultInfo(name: String = "Tom", age: Int = 22) {
 
    print("Имя: \(name) ; возраст: \(age)")
    
}

// MARK: Функция, возвращающая значение

/// ОБЪЯВЛЕНИЕ ФУНКЦИИ

/// Функция, возвращающая строкое значение "Vasya"
/// - Returns: Возвращаемое значение "Vasya"
func returnInfo() -> String {
   
    return "Vasya"
    
}

// MARK: Функция, принимающая один параметр, который можно менять
// Для этого используется ключевое слово inout

/// ОБЪЯВЛЕНИЕ ФУНКЦИИ

/// Функция c изминияемым параметров
/// - Parameter n: Изминяемое числовое значение
func increase(_ n : inout Int) { n += 10 }

// ВЫЗОВ ФУНКЦИИ increase(&d)
// При вызове функции необходимо использовать символ & перед параметром


// MARK: Функция, принимающая в качестве параметра другую функцию

/// ОБЪЯВЛЕНИЕ ФУНКЦИИ

/// Функция, принимающая в качестве параметра другую функцию типа (Int, Int) -> Int
/// - Parameter params: (Int, Int) -> Int
func getResult(_ params: (Int, Int) -> Int) {}


// MARK: Функция, возвращающая другую функцию
//Пример возвращаемой функции
func add(_ x: Int, _ y: Int) -> Int { return x + y }
 
/// ОБЪЯВЛЕНИЕ ФУНКЦИИ

/// Функция, возвращающая другую функцию типа (Int, Int) -> Int
/// - Parameter params: (Int, Int) -> Int
func returnFunc() -> ((Int, Int) -> Int) { return add }


// MARK: Вложенные функции
 
/// ОБЪЯВЛЕНИЕ ФУНКЦИИ

/// Функция, имеющая в качаестве инструкций другую функцию
/// - Parameters:
///   - r1: Значение типа Double
///   - r2: Значение типа Double
func compare(_ r1: Double, _ r2: Double) {
     
    func square(_ r: Double) -> Double { return r * r * 3.14}
     
    let s1 = square(r1)
    let s2 = square(r2)
     
    print("разница площадей:", (s1 - s2))
    
}

// ВЫЗОВ ФУНКЦИИ compare(16.0, 15.0)


// MARK: Рекурсивные функции
 
/// ОБЪЯВЛЕНИЕ ФУНКЦИИ

/// Функция, вызывающая сама себя в теле функции ( рекурсивная функция )
/// - Parameter n: Значение типа Int
/// - Returns: Возвращаемое значение типа Int
func factorial(_ n: Int) -> Int {
     
    if n == 0 { return 1 }
    return n * factorial(n-1)
    
}

// ВЫЗОВ ФУНКЦИИ factorial(6)
